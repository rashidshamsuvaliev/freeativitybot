import os, asyncio, logging
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
import openai

load_dotenv()

BOT_TOKEN       = os.getenv("BOT_TOKEN")            # —Ç–æ–∫–µ–Ω Telegram‚Äë–±–æ—Ç–∞
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")       # OpenAI key
ASSISTANT_ID    = os.getenv("ASSISTANT_ID")         # asst_‚Ä¶ (–ø—Ä–æ–º—Ç –ø—Ä–∞–≤–∏—à—å –≤ UI)
ADMIN_CHAT_ID   = int(os.getenv("ADMIN_CHAT_ID", "0"))  # ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)

# —Ö—Ä–∞–Ω–∏–º ID thread‚Äô–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
threads: dict[int, str] = {}

async def ask_assistant(user_id: int, text: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç"""
    th = threads.get(user_id)
    if not th:
        th = openai.beta.threads.create().id
        threads[user_id] = th

    run = openai.beta.threads.runs.create(
        thread_id=th,
        assistant_id=ASSISTANT_ID,
        messages=[{"role": "user", "content": text}]
    )

    while run.status not in ("completed", "failed", "cancelled"):
        await asyncio.sleep(1)
        run = openai.beta.threads.runs.retrieve(th, run.id)

    msgs = openai.beta.threads.messages.list(th)
    return msgs.data[0].content[0].text.value

@dp.message_handler(commands="start")
async def cmd_start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∞—Ä–∏–Ω–∞, HR‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç—É–¥–∏–∏. –ß—Ç–æ —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏?")

@dp.message_handler()
async def chat(m: types.Message):
    reply = await ask_assistant(m.from_user.id, m.text)
    await m.reply(reply)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª @–Ω–∏–∫
    if "@" in m.text and ADMIN_CHAT_ID:
        note = f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç @{m.from_user.username or '–±–µ–∑_–Ω–∏–∫–∞'}:\n{m.text}"
        await bot.send_message(ADMIN_CHAT_ID, note)

async def on_start(_):
    # üí° –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: —É–¥–∞–ª—è–µ–º –í–ï–°–¨ –ø—Ä–µ–∂–Ω–∏–π webhook/polling
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("Previous sessions dropped ‚Äî polling starts")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_start)
